{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Este projeto tem como finalidade praticar os conceitos aprendidos no Workshop do meste Luciano Filho.</p> <p>Neste projeto \u00e9 extraido dados de transa\u00e7\u00f5es de pix da API dos dados p\u00fablicos do Banco Central do Brasil (BCB).</p>"},{"location":"extract/","title":"Extract","text":"<p>M\u00f3dulo de extra\u00e7\u00e3o de dados da API dos dados p\u00fablicos do Banco Central do Brasil (BCB).</p>"},{"location":"extract/#src.etl.extract.extract_data","title":"<code>extract_data(data_base)</code>","text":"<p>Fun\u00e7\u00e3o para extrair os dados da API de dados p\u00fablicos do Banco Central do Brasil (BCB).</p> <p>Input: data_base (str) - Ano e M\u00eas a serem extraidos os dados (YYYYMM).</p> status_code (int) - Status da requisi\u00e7\u00e3o HTTP: 200 - OK, 404 - Not Found. <p>path (str) - Diret\u00f3rio de armazenamento dos dados extraidos.</p> Source code in <code>src/etl/extract.py</code> <pre><code>def extract_data(data_base: str):\n    \"\"\"\n    Fun\u00e7\u00e3o para extrair os dados da API de dados p\u00fablicos do Banco Central do Brasil (BCB).\n\n    Input: data_base (str) - Ano e M\u00eas a serem extraidos os dados (YYYYMM).\n\n    Return: status_code (int) - Status da requisi\u00e7\u00e3o HTTP: 200 - OK, 404 - Not Found.\n            path (str) - Diret\u00f3rio de armazenamento dos dados extraidos.\n    \"\"\"\n    path = '.data/input/'\n    url = f'https://olinda.bcb.gov.br/olinda/servico/Pix_DadosAbertos/versao/v1/odata/TransacoesPixPorMunicipio(DataBase=@DataBase)?@DataBase={repr(data_base)}&amp;$format=json'\n\n    try:\n        if not os.path.exists(path):\n            os.makedirs(path)\n\n        response = requests.get(url)\n\n        if response.status_code == 200:\n            data = response.json().get('value', [])\n            df = pd.DataFrame(data)\n            filename = path + 'transations-pix-{}.csv'.format(data_base)\n\n            df.to_csv(filename, index=False)\n            return response.status_code\n        else:\n            return response.status_code\n\n    except requests.exceptions.RequestException as e:\n        raise Exception(\n            'Erro no m\u00f3dulo de extra\u00e7\u00e3o na requisi\u00e7\u00e3o HTTP: {}'.format(e)\n        )\n    except Exception as e:\n        raise Exception('Erro no m\u00f3dulo de extra\u00e7\u00e3o: {}'.format(e))\n</code></pre>"},{"location":"load/","title":"Load","text":"<p>M\u00f3dulo de carregamento dos datos transformados para o diret\u00f3rio .data/output.</p>"},{"location":"load/#src.etl.load.load_data","title":"<code>load_data(df, file)</code>","text":"<p>Fun\u00e7\u00e3o para realizar o carregamento dos dados transformados para o diret\u00f3rio .data/output.</p> <p>Input: df (DataFrame) - DataFrame com os dados transformados.</p> Source code in <code>src/etl/load.py</code> <pre><code>def load_data(df, file: str):\n    \"\"\"\n    Fun\u00e7\u00e3o para realizar o carregamento dos dados transformados para o diret\u00f3rio .data/output.\n\n    Input: df (DataFrame) - DataFrame com os dados transformados.\n    \"\"\"\n    path = '.data/output/'\n\n    try:\n        if not os.path.exists(path):\n            os.makedirs(path)\n\n        df.to_csv(\n            path + 'trasations-pix-transformed-{}.csv'.format(file),\n            index=False,\n        )\n\n    except Exception as e:\n        raise Exception('Erro no m\u00f3dulo de carregamento: {}'.format(e))\n</code></pre>"},{"location":"transform/","title":"Transform","text":"<p>M\u00f3dulo de tranforma\u00e7\u00e3o do arquivo CSV armazenado no diret\u00f3rio .data/input e grava\u00e7\u00e3o no diret\u00f3rio .data/output.</p>"},{"location":"transform/#src.etl.transform.transform_data","title":"<code>transform_data(data_base)</code>","text":"<p>Fun\u00e7\u00e3o para realizar a transforma\u00e7\u00e3o dos dados extraidos do diret\u00f3rio .data/input e grava\u00e7\u00e3o no diret\u00f3rio .data/output.</p> data_base (str) - Ano e M\u00eas (YYYYMM). <p>file (str) - Diret\u00f3rio de armazenamento dos dados extraidos.</p> <p>Return: df (DataFrame) - DataFrame com os dados transformados.</p> Source code in <code>src/etl/transform.py</code> <pre><code>def transform_data(data_base: str):\n    \"\"\"\n    Fun\u00e7\u00e3o para realizar a transforma\u00e7\u00e3o dos dados extraidos do diret\u00f3rio .data/input e grava\u00e7\u00e3o no diret\u00f3rio .data/output.\n\n    Input: data_base (str) - Ano e M\u00eas (YYYYMM).\n           file (str) - Diret\u00f3rio de armazenamento dos dados extraidos.\n\n    Return: df (DataFrame) - DataFrame com os dados transformados.\n    \"\"\"\n    filename = '.data/input/transations-pix-{}.csv'.format(data_base)\n\n    try:\n        df = pd.read_csv(filename)\n\n        df['AnoMes'] = df['AnoMes'].astype(str)\n        df['Ano'] = df['AnoMes'].str[:4]\n        df['Mes'] = df['AnoMes'].str[4:]\n        df = df.drop(['AnoMes'], axis=1)\n\n        return df\n\n    except Exception as e:\n        raise Exception('Erro no m\u00f3dulo de transforma\u00e7\u00e3o: {}'.format(e))\n</code></pre>"}]}